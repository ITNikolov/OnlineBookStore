@page
@model OnlineBookStore.Areas.Identity.Pages.Account.RegisterModel
@{
	ViewData["Title"] = "Register";
	Layout = "/Areas/Identity/Pages/Account/_AuthLayout.cshtml";
}

<main class="py-5 auth-flex">
	<div class="form-col">
		<form method="post" asp-area="Identity" asp-page="/Account/Register" asp-route-returnUrl="@Model.ReturnUrl">
			@Html.AntiForgeryToken()
			<div asp-validation-summary="All" class="text-danger" role="alert"></div>
			<h2>Create a new account.</h2>
			<hr />

			<div class="mb-3">
				<label asp-for="Input.Email" class="form-label">Email</label>
				<input asp-for="Input.Email"
					   class="form-control"
					   name="Input.Email"
					   id="Input_Email"
					   autocomplete="username"
					   placeholder="name@example.com" />
				<span asp-validation-for="Input.Email" class="text-danger"></span>
			</div>

			<div class="mb-3">
				<label asp-for="Input.Password" class="form-label">Password</label>
				<input asp-for="Input.Password"
					   class="form-control"
					   name="Input.Password"
					   id="Input_Password"
					   type="password"
					   autocomplete="new-password"
					   placeholder="Password" />
				<span asp-validation-for="Input.Password" class="text-danger"></span>
			</div>

			<div class="mb-3">
				<label asp-for="Input.ConfirmPassword" class="form-label">Confirm Password</label>
				<input asp-for="Input.ConfirmPassword"
					   class="form-control"
					   name="Input.ConfirmPassword"
					   id="Input_ConfirmPassword"
					   type="password"
					   autocomplete="new-password"
					   placeholder="Confirm Password" />
				<span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
			</div>

			<button type="submit" class="btn btn-primary w-100">Register</button>
		</form>
	</div>
	<div class="info-col">
		<p>Current Password Requirements:</p>
		<ul class="list-unstyled mt-2 small" id="pwdCriteria">
			<li id="crit-length"><span class="me-1">❌</span>At least 6 characters</li>
			<li id="crit-upper"><span class="me-1">❌</span>One uppercase letter</li>
			<li id="crit-lower"><span class="me-1">❌</span>One lowercase letter</li>
			<li id="crit-number"><span class="me-1">❌</span>One number or symbol</li>
			<li id="crit-match"><span class="me-1">❌</span>Passwords match</li>
		</ul>
	</div>
</main>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />

	<script>
		document.addEventListener('DOMContentLoaded', () => {
		  const pwdInput     = document.getElementById('Input_Password');
		  const confirmInput = document.getElementById('Input_ConfirmPassword');
		  if (!pwdInput || !confirmInput) {
			console.warn('Password or Confirm Password input not found—live checker disabled.');
			return;
		  }

		  const tests = {
			length: pwd => pwd.length >= 6,
			upper:  pwd => /[A-Z]/.test(pwd),
			lower:  pwd => /[a-z]/.test(pwd),
			number: pwd => /[0-9\W]/.test(pwd),
			match:  ()  => pwdInput.value !== '' && pwdInput.value === confirmInput.value
		  };

		  const map = {
			length: 'crit-length',
			upper:  'crit-upper',
			lower:  'crit-lower',
			number: 'crit-number',
			match:  'crit-match'
		  };

		  function runChecks() {
			Object.keys(tests).forEach(key => {
			  const passed = tests[key](pwdInput.value);
			  const li   = document.getElementById(map[key]);
			  const icon = li.querySelector('span');

			  li.classList.toggle('text-success', passed);
			  li.classList.toggle('text-danger', !passed);
			  icon.textContent = passed ? '✓' : '❌';
			});
		  }

		  pwdInput.addEventListener('input',   runChecks);
		  confirmInput.addEventListener('input', runChecks);

		  runChecks();
		});
	</script>
}
